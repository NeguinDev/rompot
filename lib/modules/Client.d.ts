/// <reference types="node" />
import { IMessage } from "@interfaces/Messages";
import ICommand from "@interfaces/ICommand";
import { IUser } from "@interfaces/User";
import { IChat } from "@interfaces/Chat";
import IBot from "@interfaces/IBot";
import Auth from "@interfaces/Auth";
import Message from "@messages/Message";
import User from "@modules/User";
import Chat from "@modules/Chat";
import PromiseMessages from "@utils/PromiseMessages";
import { ClientEvents } from "@utils/Emmiter";
import { Chats, ChatStatus, IChats } from "../types/Chat";
import { IUsers, Users } from "../types/User";
import { ConnectionConfig } from "@config/ConnectionConfig";
import { IClient } from "@interfaces/Client";
export declare type ClientType = Client<IBot, ICommand>;
export default class Client<Bot extends IBot, Command extends ICommand> extends ClientEvents implements IClient {
    promiseMessages: PromiseMessages;
    autoMessages: any;
    bot: Bot;
    config: ConnectionConfig;
    commands: Command[];
    get id(): string;
    get status(): import("..").BotStatus;
    constructor(bot: Bot, config?: ConnectionConfig, commands?: Command[]);
    configEvents(): void;
    connect(auth: Auth | string): Promise<void>;
    reconnect(alert?: boolean): Promise<void>;
    stop(reason: any): Promise<void>;
    setCommands(commands: Command[]): void;
    getCommands(): Command[];
    addCommand(command: Command): void;
    getCommand(command: string): Command | null;
    deleteMessage(message: IMessage): Promise<void>;
    removeMessage(message: IMessage): Promise<void>;
    readMessage(message: IMessage): Promise<void>;
    addReaction(message: IMessage, reaction: string): Promise<void>;
    removeReaction(message: IMessage): Promise<void>;
    send(message: IMessage): Promise<Message>;
    awaitMessage(chat: IChat | string, ignoreMessageFromMe?: boolean, stopRead?: boolean, ...ignoreMessages: IMessage[]): Promise<Message>;
    addAutomate(message: Message, timeout: number, chats?: Chats, id?: string): Promise<any>;
    getBotName(): Promise<string>;
    setBotName(name: string): Promise<void>;
    getBotDescription(): Promise<string>;
    setBotDescription(description: string): Promise<void>;
    getBotProfile(): Promise<Buffer>;
    setBotProfile(profile: Buffer): Promise<void>;
    getChat(chat: IChat | string): Promise<Chat | null>;
    setChat(chat: IChat): Promise<void>;
    getChats(): Promise<Chats>;
    setChats(chats: IChats): Promise<void>;
    addChat(chat: string | IChat): Promise<void>;
    removeChat(chat: string | IChat): Promise<void>;
    getChatName(chat: IChat | string): Promise<string>;
    setChatName(chat: IChat | string, name: string): Promise<void>;
    getChatDescription(chat: IChat | string): Promise<string>;
    setChatDescription(chat: IChat | string, description: string): Promise<void>;
    getChatProfile(chat: IChat | string): Promise<Buffer>;
    setChatProfile(chat: IChat | string, profile: Buffer): Promise<void>;
    changeChatStatus(chat: IChat | string, status: ChatStatus): Promise<void>;
    addUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    removeUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    promoteUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    demoteUserInChat(chat: IChat | string, user: IUser): Promise<void>;
    createChat(chat: IChat): Promise<void>;
    leaveChat(chat: IChat | string): Promise<void>;
    getChatAdmins(chat: IChat | string): Promise<Users>;
    getChatLeader(chat: IChat | string): Promise<User>;
    getUser(user: IUser | string): Promise<User | null>;
    setUser(user: IUser | string): Promise<void>;
    getUsers(): Promise<Users>;
    setUsers(users: IUsers): Promise<void>;
    addUser(user: IUser | string): Promise<void>;
    removeUser(user: IUser | string): Promise<void>;
    getUserName(user: IUser | string): Promise<string>;
    setUserName(user: IUser | string, name: string): Promise<void>;
    getUserDescription(user: IUser | string): Promise<string>;
    setUserDescription(user: IUser | string, description: string): Promise<void>;
    getUserProfile(user: IUser | string): Promise<Buffer>;
    setUserProfile(user: IUser | string, profile: Buffer): Promise<void>;
    unblockUser(user: IUser | string): Promise<void>;
    blockUser(user: IUser | string): Promise<void>;
}

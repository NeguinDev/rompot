/// <reference types="node" />
import type { IChats, ChatStatus } from "../types/Chat";
import type { IUsers } from "../types/User";
import { ConnectionConfig } from "../config/ConnectionConfig";
import { IMediaMessage, IMessage } from "../interfaces/IMessage";
import { IClient } from "../interfaces/IClient";
import { IAuth } from "../interfaces/IAuth";
import { IChat } from "../interfaces/IChat";
import { IUser } from "../interfaces/IUser";
import { IBot } from "../interfaces/IBot";
import Command from "./Command";
import User from "./User";
import Chat from "./Chat";
import PromiseMessages from "../utils/PromiseMessages";
import { ClientEvents } from "../utils/Emmiter";
export default class Client<Bot extends IBot> extends ClientEvents implements IClient {
    promiseMessages: PromiseMessages;
    autoMessages: any;
    bot: Bot;
    config: ConnectionConfig;
    commands: Command[];
    get id(): string;
    get status(): import("..").BotStatus;
    constructor(bot: Bot, config?: Partial<ConnectionConfig>, commands?: Command[]);
    configEvents(): void;
    connect(auth: IAuth | string): Promise<void>;
    reconnect(alert?: boolean): Promise<void>;
    stop(reason?: any): Promise<void>;
    setCommands(commands: Command[]): void;
    getCommands(): Command[];
    addCommand(command: Command): void;
    removeCommand(command: Command): void;
    getCommand(command: string | Command): Command | null;
    deleteMessage(message: IMessage): Promise<void>;
    removeMessage(message: IMessage): Promise<void>;
    addReaction(message: IMessage, reaction: string): Promise<void>;
    removeReaction(message: IMessage): Promise<void>;
    addAnimatedReaction(message: IMessage, reactions: string[], interval?: number, maxTimeout?: number): (reactionStop?: string) => Promise<void>;
    readMessage(message: IMessage): Promise<void>;
    send(message: IMessage): Promise<IMessage>;
    awaitMessage(chat: IChat | string, ignoreMessageFromMe?: boolean, stopRead?: boolean, ...ignoreMessages: IMessage[]): Promise<IMessage>;
    addAutomate(message: IMessage, timeout: number, chats?: IChats, id?: string): Promise<any>;
    /**
     * * Retorna a stream da mídia
     * @param message Mídia que será baixada
     * @returns Stream da mídia
     */
    downloadStreamMessage(message: IMediaMessage): Promise<Buffer>;
    getBotName(): Promise<string>;
    setBotName(name: string): Promise<void>;
    getBotDescription(): Promise<string>;
    setBotDescription(description: string): Promise<void>;
    getBotProfile(): Promise<Buffer>;
    setBotProfile(profile: Buffer): Promise<void>;
    getChat(chat: IChat | string): Promise<IChat | null>;
    setChat(chat: IChat): Promise<void>;
    getChats(): Promise<IChats>;
    setChats(chats: IChats): Promise<void>;
    addChat(chat: string | Chat): Promise<void>;
    removeChat(chat: string | Chat): Promise<void>;
    getChatName(chat: IChat | string): Promise<string>;
    setChatName(chat: IChat | string, name: string): Promise<void>;
    getChatDescription(chat: IChat | string): Promise<string>;
    setChatDescription(chat: IChat | string, description: string): Promise<void>;
    getChatProfile(chat: IChat | string): Promise<Buffer>;
    setChatProfile(chat: IChat | string, profile: Buffer): Promise<void>;
    changeChatStatus(chat: IChat | string, status: ChatStatus): Promise<void>;
    addUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    removeUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    promoteUserInChat(chat: IChat | string, user: IUser | string): Promise<void>;
    demoteUserInChat(chat: IChat | string, user: User): Promise<void>;
    createChat(chat: IChat): Promise<void>;
    leaveChat(chat: IChat | string): Promise<void>;
    getChatUsers(chat: IChat | string): Promise<IUsers>;
    getChatAdmins(chat: IChat | string): Promise<IUsers>;
    getChatLeader(chat: IChat | string): Promise<IUser>;
    getUser(user: IUser | string): Promise<IUser | null>;
    setUser(user: IUser | string): Promise<void>;
    getUsers(): Promise<IUsers>;
    setUsers(users: IUsers): Promise<void>;
    addUser(user: IUser | string): Promise<void>;
    removeUser(user: IUser | string): Promise<void>;
    getUserName(user: IUser | string): Promise<string>;
    setUserName(user: IUser | string, name: string): Promise<void>;
    getUserDescription(user: IUser | string): Promise<string>;
    setUserDescription(user: IUser | string, description: string): Promise<void>;
    getUserProfile(user: IUser | string): Promise<Buffer>;
    setUserProfile(user: IUser | string, profile: Buffer): Promise<void>;
    unblockUser(user: IUser | string): Promise<void>;
    blockUser(user: IUser | string): Promise<void>;
}

/// <reference types="node" />
import { ConnectionConfig } from "../config/ConnectionConfig";
import { MessageInterface } from "../interfaces/MessagesInterfaces";
import UserInterface from "../interfaces/UserInterface";
import ChatInterface from "../interfaces/ChatInterface";
import Auth from "../interfaces/Auth";
import LocationMessage from "../messages/LocationMessage";
import ContactMessage from "../messages/ContactMessage";
import ButtonMessage from "../messages/ButtonMessage";
import VideoMessage from "../messages/VideoMessage";
import ImageMessage from "../messages/ImageMessage";
import MediaMessage from "../messages/MediaMessage";
import ListMessage from "../messages/ListMessage";
import Message from "../messages/Message";
import Command from "./Command";
import Chat from "./Chat";
import User from "./User";
import PromiseMessages from "../utils/PromiseMessages";
import Emmiter from "../utils/Emmiter";
import { Commands, CommandsInject } from "../types/Command";
import { BotModule, BotStatus } from "../types/Bot";
import { Chats, ChatStatus } from "../types/Chat";
import { Users } from "../types/User";
export default class BotBase implements BotModule {
    connect(auth: Auth | string): Promise<void>;
    reconnect(alert?: boolean): Promise<void>;
    stop(reason: any): Promise<void>;
    autoMessages: any;
    promiseMessages: PromiseMessages;
    id: string;
    status: BotStatus;
    ev: Emmiter;
    config: ConnectionConfig;
    commands: Commands;
    configurate(config?: ConnectionConfig): void;
    configEvents(): void;
    readMessage(message: MessageInterface): Promise<void>;
    send(message: MessageInterface): Promise<Message>;
    awaitMessage(chat: ChatInterface | string, ignoreMessageFromMe?: boolean, stopRead?: boolean, ...ignoreMessages: Message[]): Promise<Message>;
    addAutomate(message: Message, timeout: number, chats?: Chats, id?: string): Promise<any>;
    setCommands(commands: CommandsInject): void;
    getCommands(): {};
    setCommand(command: Command): void;
    getCommand(command: string, ...args: any[]): null;
    addChat(chat: string | ChatInterface): Promise<void>;
    removeChat(chat: string | ChatInterface): Promise<void>;
    getChatName(chat: ChatInterface | string): Promise<string>;
    getChatDescription(chat: ChatInterface | string): Promise<string>;
    getChatProfile(chat: ChatInterface | string): Promise<Buffer>;
    setChat(chat: ChatInterface): Promise<void>;
    setChatName(chat: ChatInterface | string, name: string): Promise<void>;
    setChatDescription(chat: ChatInterface | string, description: string): Promise<void>;
    setChatProfile(chat: ChatInterface | string, profile: Buffer): Promise<void>;
    addUserInChat(chat: ChatInterface | string, user: UserInterface | string): Promise<void>;
    removeUserInChat(chat: ChatInterface | string, user: UserInterface | string): Promise<void>;
    promoteUserInChat(chat: ChatInterface | string, user: UserInterface | string): Promise<void>;
    demoteUserInChat(chat: ChatInterface | string, user: UserInterface): Promise<void>;
    createChat(chat: ChatInterface): Promise<void>;
    leaveChat(chat: ChatInterface | string): Promise<void>;
    changeChatStatus(chat: string | ChatInterface, status: ChatStatus): Promise<void>;
    getChat(chat: ChatInterface | string): Promise<null>;
    setChats(chats: Chats): Promise<void>;
    getChatAdmins(chat: ChatInterface | string): Promise<{}>;
    getChatLeader(chat: Chat | string): Promise<User>;
    getChats(): Promise<Chats>;
    getBotName(): Promise<string>;
    setBotName(name: string): Promise<void>;
    getBotDescription(): Promise<string>;
    setBotDescription(description: string): Promise<void>;
    getBotProfile(): Promise<Buffer>;
    setBotProfile(image: Buffer): Promise<void>;
    addUser(user: string | UserInterface): Promise<void>;
    getUser(user: UserInterface | string): Promise<null>;
    setUser(user: string | UserInterface): Promise<void>;
    removeUser(user: UserInterface | string): Promise<void>;
    getUserName(user: UserInterface | string): Promise<string>;
    setUserName(user: UserInterface | string, name: string): Promise<void>;
    getUserDescription(user: UserInterface | string): Promise<string>;
    setUserDescription(user: UserInterface | string, description: string): Promise<void>;
    getUserProfile(user: UserInterface | string): Promise<Buffer>;
    setUserProfile(user: UserInterface | string, profile: Buffer): Promise<void>;
    unblockUser(user: UserInterface | string): Promise<void>;
    blockUser(user: UserInterface | string): Promise<void>;
    getUsers(): Promise<{}>;
    setUsers(users: Users): Promise<void>;
    Chat(chat: ChatInterface | string): Chat;
    User(user: UserInterface | string): User;
    Command(): Command;
    deleteMessage(message: MessageInterface): Promise<void>;
    removeMessage(message: MessageInterface): Promise<void>;
    addReaction(message: MessageInterface, reaction: string): Promise<void>;
    removeReaction(message: MessageInterface): Promise<void>;
    Message(chat: ChatInterface | string, text: string): Message;
    MediaMessage(chat: ChatInterface | string, text: string, file: any): MediaMessage;
    ImageMessage(chat: ChatInterface | string, text: string, image: Buffer): ImageMessage;
    VideoMessage(chat: ChatInterface | string, text: string, video: Buffer): VideoMessage;
    ContactMessage(chat: ChatInterface | string, text: string, contact: string | string[]): ContactMessage;
    LocationMessage(chat: ChatInterface | string, latitude: number, longitude: number): LocationMessage;
    ListMessage(chat: ChatInterface | string, text: string, button: string): ListMessage;
    ButtonMessage(chat: ChatInterface | string, text: string): ButtonMessage;
}
